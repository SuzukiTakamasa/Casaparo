#!/usr/bin/env bash
set -euo pipefail

# Small custom build script to produce wasm and a JS shim without using worker-build/esbuild.
# Usage: ./scripts/build-wasm.sh

ROOT_DIR=$(cd "$(dirname "$0")/.." && pwd)
BUILD_DIR="$ROOT_DIR/build/worker"
CRATE_NAME="worker-rust"
WASM_TARGET_DIR="$ROOT_DIR/target/wasm32-unknown-unknown/release"
WASM_FILE="$WASM_TARGET_DIR/${CRATE_NAME}.wasm"

mkdir -p "$BUILD_DIR"

echo "Building Rust crate for wasm32-unknown-unknown..."
rustup target add wasm32-unknown-unknown || true
cargo build --release --target wasm32-unknown-unknown

if [ ! -f "$WASM_FILE" ]; then
  echo "Expected wasm not found at $WASM_FILE"
  exit 1
fi

echo "Ensuring wasm-bindgen-cli is installed..."
if ! command -v wasm-bindgen >/dev/null 2>&1; then
  echo "Installing wasm-bindgen-cli (cargo install --locked wasm-bindgen-cli)..."
  cargo install --locked wasm-bindgen-cli
fi

echo "Running wasm-bindgen..."
wasm-bindgen "$WASM_FILE" --out-dir "$BUILD_DIR" --target web

# Create a minimal shim that exports the Worker entrypoint used by wrangler/main
cat > "$BUILD_DIR/shim.mjs" <<'EOF'
import init, { main as worker_main } from "./worker_rust.js";

// initialize wasm and forward events to the Rust #[event(fetch)] entrypoint
async function initWasm() {
  await init();
}

addEventListener("fetch", event => {
  event.respondWith((async () => {
    await initWasm();
    // The Rust entrypoint is named `main` with signature (Request, Env, Context)
    // worker-rs exposes a `main` function that returns a Response.
    // wasm-bindgen generated wrapper should provide a handler; call via global `__wbg_*` if needed.
    // Here we call the exported `main` function generated by worker crate
    // The worker crate uses #[event(fetch, respond_with_errors)] which registers automatically
    // but to be safe, if the crate exported a function we could call it. For now, rely on registration.
    // NOTE: If the Rust code registers its own fetch listener during init, nothing more is needed.
  })());
});

export default {};
EOF

echo "Build produced: $BUILD_DIR"
